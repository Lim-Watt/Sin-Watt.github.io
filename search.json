[{"title":"联合省选-2025-邮寄","path":"/article/70d56e74.html","content":"经过 Day0 晚上 在酒店自习。很认真的在自习，但不知道自习了个什么。 自习完，在房间里剥瓜子，可怜的 @Dovish 没睡着。 Day1 上午 一眼猜了个结论，二分，排序，通过 T1（的大样例），然而只过了不到半个小时。 看 T2、T3，会不了一点。吃瓜子（是瓜子仁，昨天剥的）。 写了 T2 的 20 分暴力，写 T3 的 8 分暴力。 根据模拟赛的经验，T3 的可做部分分一般会更多，于是想 C 性质，发现可行，先写了 AC 性质，然后改成 C 性质。 T3 足够了，回来想 T2。偶遇 bitset 乱写铸就满正确性 O(n2log⁡2n)O(n^2\\log^2n)O(n2log2n) 不如暴力做法。（为什么不写部分分？为什么写正解不考虑复杂度？） Day1 下午 吃，打雀，剥瓜子。 Day1 晚上 在酒店自习。完全不想自习。 Day2 上午 一眼猜了个结论，二分，线段树，通过 T1（的大样例），然而已经过了一个半小时。 觉得 T2、T3 非常顺眼，但就是会不了一点。吃瓜子（是瓜子仁，昨天剥的）。 写了 T2 的 12 分暴力，写 T3 的 8 分暴力。 T3 的 8 分暴力过不了样例，悲。 写 T2 的 sub2，过不了，悲。 Day2 下午 坐车返回。 集体去吃满江红。但是原先那家满江红垮了…… 看到数字化管理的屏幕，空闲的包间就是绿的，那时大概四点半左右，都是绿的。但是我们来了，于是就有个框红了…… Day3 悲催一早去补文化课。 Day6 出成绩。 Day1 还好，T1、T3 没爆，T2 后面那坨没爆空间。 Day2 炸了。T1 只有 40。。看样子是线段树哪儿没对。好吧，我再也不相信 ccf 的数据和大样例了。 总结 永远不要把自己的命运放在 ccf 手里。 写 T1，要检查，要对拍。 DS 写少了导致的。 DP 写少了导致的。 不会容斥导致的。 不写暴力导致的。 码力低下导致的。 不学科技导致的。 事实证明，在考场吃瓜子仁并不能达到和嗑瓜子一样的防困的效果，所以以后还是不要剥瓜子折磨自己了。 所以，下次能不晚自习吗……","categories":["OI","游记"]},{"title":"NOIP2024","path":"/article/49bfeb37.html","content":"简单总结一下。 难度感觉：还好。比昨年简单。 最大失误：没写 T4 暴力。 失误原因：分配给 T4 的时间少了。 那时间都去哪儿了？ T1 总用时 1h。期望 100。 虽然比较顺利，但速度还是慢了 改改调调、贪心思路完善了 3 次才过大样例。 这种难度在贪心思路和结论的题，搞人心态、浪费时间、容易fst。 需要多加 cf、at 比赛的练习。以后 abc 也要打了，不能犯懒了，这种题要最多 20 分钟要过掉。 T2 总用时 1h。期望 100 看错题了，对着一个难度超过黑的东西比划了半个小时…… 还好，这次只花半个小时就反应过来了 以后读题还是要读两遍 T3 总用时 2h。 题目定位是带有浓浓结论气息的构造答案型的计数题。属于我擅长的类型。看到后比较兴奋，以为前 40 有望。（这是事实。 前一个小时的熟悉感觉、推关键部分分和对应的结论、完善正解思路，码出代码。 肯定会有哪儿打错或遗漏，然后测第三个大样例的时候爆栈了。然后尝试开大栈空间，无果。虚空调试代码。（至少半个小时） 当时很崩溃，抽出来看 T4，看了 10 多分钟没看出做法，又回来调 T3，后发现第四个样例数据还小一些，开始调。最后似乎是没调出来。 差一点就写出来哩。 一个紫，如果是向着正解去的话，2h 的用时应该差不多。但考虑到是自己擅长的，这题其实应该 1.5h 就够了。毕竟中途发了半个多小时的疯。 其实这题的主要问题不是时间，而是精准度不够。不是 ds 题，就不应该存在调代码的环节。 T4 其实就算前面抽出 1.5h，暴力 64 我应该也拿不满。毕竟自己的 ds 水平自己心里有数。 倒是 10 多分钟连暴力都看不出来就有些丢人了，大概是最近部分分写少了的问题。（没错，就是懒的问题，就应该拎出去多跑两圈） 过去的都过去啦，接下来该一边填OI中之前挖的坑，一边死心补文化课了。 呜呜呜，我的364啊，我的前40啊，我的停课啊……","categories":["OI","游记"]},{"title":"字符串上dp","path":"/article/c7bb6bf2.html","content":"https://www.cnblogs.com/hkttg/p/10162391.htmlhttps://www.cnblogs.com/hkttg/p/10162391.html https://blog.csdn.net/qq_51282224/article/details/122783438https://blog.csdn.net/qq_51282224/article/details/122783438 https://www.luogu.com.cn/training/638485https://www.luogu.com.cn/training/638485 回文 小区间更新大区间 因为原串和反串的 LCS（最长公共子序列），就等同于在原串中有 LCS 个字符是对应相等的。回文差异就是那些对应不相等的位置。 于是一个回文问题就变成子序列问题 神奇 UVA1630 串折叠 Folding sb UVA","categories":["OI","专项总结"]},{"title":"CSP-S-2024","path":"/article/2752e66e.html","content":"100 + 100 + 0 + 0 开考一个小时多没看题，在捣鼓虚拟机、还原 NOI LINUX 配置、背诵缺省源。 之前老师让研究 VirtualBox 的时候我没管，于是吃了点亏，多花了一点时间。 默写缺省源的时候写了一些很复杂的东西（之前习惯用自己写的输入输出、以后考虑使用 cin、cout。 然后第一题签，应该没问题。 第二题稍微多抠了一点细节，没什么大问题。 第三题开写的时候比赛还有一个半小时，当时想起了一道加强版的题（那题是网络流），于是想复杂了，花了半个小时才想出做法，半个小时写出代码，但不知道哪儿有点问题，最后半个小时又不敢一直调题，于是就没调出来。 当时觉得 T3 调的出来、T4 暴力不好写于是就没写，有点吃亏。 简单总结就是准备不够充分。心态和发挥没什么问题。 所以 VirtualBox 要重新看一遍。自己还是要装一个。考场发现那个虚拟机有三个问题待解决： VirtualBox 剪贴板不同步。 ( (顶栏 -&gt; 设备) / (设置 -&gt; 常规 -&gt; 高级) -&gt; 共享剪贴板 -&gt; 双向) VirtualBox 占用了 右Ctrl。 ( 顶栏 -&gt; 热键 -&gt; 虚拟电脑 -&gt; 主机组合键 ) 他那个虚拟机 sudo 命令用不了。 ( sb某学校 ) 简化缺省源，没必要的东西就不要写了。我想快读快写应该还是用不到的。 把 T3 补了。虽然是简单唐氏题，但是一定要调出来，不然晚上睡不好。 11 月计划 时间 安排 方案 -1 ～ 5 字符串上dp 绿到紫带 “字符串” 和 “dp” 标签的题 6 ～ 12 背包 绿到紫带 “背包” 标签的题 13 ～ 19 概率DP https://www.luogu.com.cn/training/4922 https://www.luogu.com.cn/training/386704 20 ～ 26 大ds 正在求题 27 ～ 29 随机补漏 th { text-align:center } td { text-align:center }","categories":["OI","游记"]},{"title":"题解 [省选联考 2020 B 卷] 消息传递","path":"/article/4cd9b5e7.html","content":"省流： 长剖做法，全网首发，最优拿下，把某点分治吊杀。 实际上卡满的话没有点分治快。 长链剖分属于树链剖分的一种。不过重儿子是子树深度最大的那个儿子（称为长儿子）。 长剖性质有： 长链的长度之和为 O(n)O(n)O(n)。 对于树上的任何一个点跳长链到根，需要经过不超过 O(n)O(\\sqrt{n})O(n​) 条长链。长链的长度依次为 1,2,3,⋯ ,n1,2,3,\\cdots,\\sqrt{n}1,2,3,⋯,n​ 时卡满。 由于第二条性质，使得长剖的发挥空间比重剖小。不过由于长剖独特的定义，使得其可以在与距离相关的部分问题中，给出线性且低常数神奇做法。比如长剖优化DP。 我们用 son[u]son[u]son[u] 表示非叶子节点 uuu 的长儿子。 定义 f[u][i]f[u][i]f[u][i] 为以 uuu 为根的子树中，与 uuu 距离为 iii 的点的个数。我们每个节点的状态直接继承其长儿子的节点状态（f[u][i]←f[son[u]][i−1]f[u][i]\\gets f[son[u]][i-1]f[u][i]←f[son[u]][i−1]），同时将短儿子的 DP 状态暴力合并。 有意思的是，由于继承的过程可以视为 DP 数组整体后移一位，所以可以利用指针 O(1)O(1)O(1) 的实现这个过程。而每个长链只会被暴力合并一次，所以时间总复杂度是 O(n)O(n)O(n) 的。同时，每个叶子节点需要 O(1)O(1)O(1) 的空间，每个非叶子节点由于继承了长儿子，只需要 O(1)O(1)O(1) 的额外空间，所以空间总复杂度也是 O(n)O(n)O(n) 的。 为什么不能用重剖实现呢？重剖不同与长剖，无法保证重儿子的子树深度不小于轻儿子的子树深度。这会使得合并时没有对应的空间存储 DP 状态。 注意，由于长儿子的 DP 数组会被继承走，所以询问要挂在点上，不能在线。虽然短儿子的 DP 数组不会受到影响。 做到这里，我们已经把子树内的贡献解决了。然后发现子树外的不是很好做。如果定义 g[u][i]g[u][i]g[u][i] 为以 uuu 为根的子树外，与 uuu 距离为 iii 的点的个数，时空复杂度完全无法承受。我为此困惑了很久（试图长剖换根 DP）。回顾 fff 的过程，发现状态数由链长限制，这启发我们把 g[u][i]g[u][i]g[u][i] 限制到长链以内。即重新定义 g[u][i]g[u][i]g[u][i] 为 以 uuu 所在长链的链顶为根的子树内，以 uuu 为根的子树外，与 uuu 距离为 iii 的点的个数。此时状态数被控制在了二倍链长以内（从长链的底端的叶子到另一个叶子，而另一个叶子的深度不大于长链的底端的叶子）。 明确了 ggg 之后，转移不难。如果自己是长儿子，就继承父亲。然后再暴力合并上短儿子的 fff。这里是 fff 哦，看清！ 注意，fff 是自下而上的，ggg 是自上而下的，继承方向相反，注意实现（看注释）。 长链内的信息，我们可以用 f[u]f[u]f[u] 和 g[u]g[u]g[u] 保证。但可能有长链外的信息遗失。跳长链即可。这里不好讲解，看注释。 但时间复杂度也无奈的来到了 O(n+qn)O(n+q\\sqrt{n})O(n+qn​)。但是常数就是小啊，你来打我呀～ 代码较短，不过细节较多。 codeconst int N = 1e5 + 7;int n, m;struct E &#123; int to, ne;&#125; e[N &lt;&lt; 1];int h[N];int idx;inline void add(int x, int y) &#123; e[ ++ idx] = (E)&#123;y, h[x]&#125;; h[x] = idx;&#125;vector&lt;pair&lt;int, int&gt;&gt; Q[N];int ans[N];int hei[N]; // 子树深度int son[N]; // 长儿子int far[N]; // 父亲int top[N]; // 链顶int dfn[N]; // 长剖后的 dfs 序int dnt;int fff[N]; // f 的空间池int zero = 0; // 无奈之举/* ! ! ! ! 马蜂警告 ! ! ! !对于一个数组 shuzu[]一般下标为 i 的元素由 shuzu[i] 表达如果你看到 i[shuzu] 的写法，请不要惊惶，这与上面等价注释里我尽可能避免下面这个写法 - - - - 一些规定 - - - -注释里，top直接表示长链链顶节点btm直接表示长链链底节点有 dfn[btm] = dfn[top] + hei[top] - 1*/// 第一遍dfs 长剖void dfs1(int u, int fa) &#123; for (int i = h[u]; i; i = e[i].ne) &#123; int v = e[i].to; if (v == fa) continue; dfs1(v, u); if (u[son][hei] &lt; v[hei]) &#123; u[son] = v; &#125; &#125; u[far] = fa; u[hei] = u[son][hei] + 1;&#125;/*由于本人不喜指针，故利用 dfs 序实现O(1)继承我们把 f[u][0] 放在 fff[dfn[u]] 处这样 f[u][1] 从 f[son[u]]][0] 继承时，fff[dfn[son[u]]] &lt;=&gt; fff[dfn[u]]一段长链的空间范围为 【 dfn[top] ， dfn[btm] 】*/inline int &amp;f(int i, int j) &#123; if (j &gt;= hei[i] || j &lt; 0) return zero; // 询问里的 k 可能超过当前链长 else return fff[i[dfn] + j];&#125;// 第二遍 dfs 求 fvoid dfs2(int u, int tp) &#123; u[top] = tp; u[dfn] = ++ dnt; if (u[son]) &#123; dfs2(u[son], tp); &#125; for (int i = h[u]; i; i = e[i].ne) &#123; int v = e[i].to; if (v == u[far] || v == u[son]) &#123; continue; &#125; dfs2(v, v); &#125; /* 注意，这里并没有合并短儿子 f 仅包含长儿子内的信息 */ for (auto i : Q[u]) &#123; int x = u; int y = i.second; while (x &amp;&amp; y &gt;= 0) &#123; ans[i.first] += f(x, y); // 跳长链 y -= x[top][hei] - x[hei] + 1; x = x[top][far]; &#125; &#125; // 合并信息 f(u, 0) = 1; for (int i = h[u]; i; i = e[i].ne) &#123; int v = e[i].to; if (v == u[far] || v == u[son]) &#123; continue; &#125; for (int j = 0; j &lt; v[hei]; ++ j) &#123; f(u, j + 1) += f(v, j); &#125; &#125;&#125;int ggg[N * 2];/*构造 g 的空间有点麻烦先确认左极限 g[top][hei[top] - 1] 确认右极限 g[btm][0] 需要 2 * hei[top] - 1 的空间 确认大致空间范围 【 2*(dfn[top]) ， 2*(dfn[btm]) 】链长为 4，dfn[top] = 6 时，dfn[btm] = 9;在空间池里状态：下标 10 11 12 13 14 15 16 17 18 19 20 ——— ——— ——— ——— ——— ——— ——— ——— ——— ——— ——— | | | + | + | + | + | + | + | + | | | ——— ——— ——— ——— ——— ——— ——— ——— ——— ——— ——— ^ ^ ^ ^ | g[top][0] | g[btm][0] g[top][hei[top] - 1] g[btm][1]于是可以构造 g[u][0] 为 ggg[dfn[btm]*2 - (hei[u] - 1)] =&gt; ggg[dfn[btm] + dfn[u]] g[u][i] 为 ggg[dfn[btm] + dfn[u] - i] =&gt; ggg[dfn[top] + hei[top] - 1 + dfn[u] - i]*/inline int &amp;g(int i, int j) &#123; if (i[top][hei] + i[top][hei] - i[hei] &lt;= j) return zero; return ggg[i[dfn] + i[top][dfn] + i[top][hei] - j - 1];&#125;// 第三遍 dfs 求 gvoid dfs3(int u) &#123; /* 此时 g 为 u 子树以外的信息 */ g(u, 0) = 1; for (int i = h[u]; i; i = e[i].ne) &#123; int v = e[i].to; if (v == u[far] || v == u[son]) continue; for (int j = 0; j &lt; v[hei]; ++ j) &#123; g(u, j + 1) += f(v, j); /* 因为短儿子的 DP 数组不会被继承 所以 f(v, j) 是可用的 */ &#125; &#125; /* 此时 g 为长儿子以外的信息 */ for (auto i : Q[u]) &#123; // 本长链内，长儿子外的信息 ans[i.first] += g(u, i.second); int x = u[top]; int y = i.second - x[hei] + u[hei]; while (x &gt; 1 &amp;&amp; y &gt; 0) &#123; /* 注意这里脑抽的跳长链方式 因为上一层里统计了这一层的信息（相当于走出长链又立刻走回来了 所以我们要减去一个 f 由于我们要同时访问两条链的信息，所以只能停在长链顶 */ ans[i.first] += g(x[far], y - 1) - f(x, y - 2); x = x[far]; y -= x[top][hei] - x[hei] + 1; x = x[top]; &#125; &#125; /* 此时 g 为长儿子以外的信息，它还要处理短儿子内的询问 */ for (int i = h[u]; i; i = e[i].ne) &#123; int v = e[i].to; if (v == u[far] || v == u[son]) continue; dfs3(v); &#125; /* g[u] 使命结束，传给 g[son[u]] */ if (u[son]) &#123; dfs3(u[son]); &#125;&#125;inline void INIT() &#123; &#125;inline void WORK() &#123; rd(n, m); for (int i = 2; i &lt;= n; ++ i) &#123; int x, y; rd(x, y); add(x, y); add(y, x); &#125; for (int i = 1; i &lt;= m; ++ i) &#123; int x, k; rd(x, k); Q[x].push_back(&#123;i, k&#125;); ans[i] = 0; &#125; dfs1(1, 0); dfs2(1, 1); dfs3(1); for (int i = 1; i &lt;= m; ++ i) &#123; wr(ans[i], &#x27; &#x27;); ans[i] = 0; &#125; idx = 0; dnt = 0; for (int i = 1; i &lt;= n; ++ i) &#123; h[i] = 0; hei[i] = 0; son[i] = 0; fff[i] = 0; ggg[i * 2] = 0; ggg[i * 2 + 1] = 0; Q[i].clear(); &#125;&#125;","tags":["长剖"],"categories":["OI","题解"]},{"title":"鱼二·中秋特辑","path":"/article/ae45ca2a.html","content":"中秋放假，从八月十二的下午六点放到八月十四的早上八点。 十二日下午，一放学，一家人就开车到了 【someplace】。 环境一下就不一样了。是树，是山，看青翠的一片；是鸟，是虫，听空灵而悠远；是水，是风，在清凉的江畔。已入夜，不忍打开手电；浅望月，可惜尚未成园。 十三日早期钓鱼。再写“水清鱼若飞”的“《小石潭记》文”难免俗套。何不松口气，醉情这山水之美。 雨是踮着脚走来的，但水面上漾开的脚步暴露了它的行踪。雨急了，于是，雨急了，在天地间放肆自己的小情绪。这却是打搅了江水的梦，江水也哗的闹起来。竟分辨不开扑下的雨点和跃起的水花了。一时间，耳畔仅得水声，眼前尽是水汽。天地因水而交融、交溶，连我一起。不见对岸了。 小情绪发完了，起床气闹过了，天地重新明朗起来。恍然发现对岸山腰一圈玉带，是水在天上流吧。 午后，雨又吵醒了午睡的江…… 没留神，今天的鱼钓得过多了呀，真是醉过，醉过。 八月十三午后渔歌渊明醒时仍彷徨，青山绿水旁。秋清风凉分外爽。渔歌早起悠扬。中秋欠两日，天阴星辰稀。赏月未圆不是时。诗人已圆闲心。","tags":["生活记录"],"categories":["鲜花"]},{"title":"字符串","path":"/article/fc81fbfd.html","content":"串串现状： 字符串题 = 鬼畜的字符串分析 + 毒瘤的ds维护 Lyndon 分解 Manacher 算法 回文自动机,PAM 有限状态自动机 后缀自动机,SAM AC 自动机 KMP 后缀数组,SA 后缀树 黑 26 紫 65 蓝 23 绿 5 黄 1 提高 KMP NOI Manacher 算法 扩展 KMP 算法 有限状态自动机 AC 自动机 后缀自动机,SAM 后缀数组,SA 后缀树 回文自动机,PAM 二分答案 对原串先进行变换： 翻转、拼接、插入 相比于 “子串”，我们肯定更希望看到 “前缀” 或 “后缀”，因为前者有 O(n^2) 个，而后者只有 O(n) 个。 SA 字典序 二维数点 压位bitset","categories":["OI","专项总结"]},{"title":"中山集训小结","path":"/article/f4e98d9.html","content":"一句话概括：状态极差，仿佛就是去旅游的，应当被拖出去严肃批评教育。 暴露的问题包括但不限于： 在模拟赛中出现了很多低级的错误。 抗影响能力不足：容易被别人说话影响心情，容易被别人玩游戏吸引然后一直伸着脖子看。 在讲自己了解的知识点时，没有认真听课复习回顾。 在讲自己不会的知识点时，没有认真推敲，听讲时基本没有笔记，笔记散烂。 已有计划： 关于低级错误，整理，在每次模拟考前看一遍，惩罚待定 在考试是不使用缺省源（害人不浅 继续写作题笔记，每周回顾一次笔记和A2题目 每两周抽空分析一个专项的作题方法技巧 关于摸鱼：算上中山那两周，放假这么久玩够了。开学后在机房时间不多，哪里想得起摸鱼","categories":["OI","游记"]},{"title":"考前复习","path":"/article/bacf667.html","content":"考前复习 一 有关 VSCode VSCode 环境 https://limit-bed.com/article/f5f849behttps://limit-bed.com/article/f5f849be VSCode 设置 Auto Save: afterDelay font: Consolas Word Wrap: on Auto Closing * : never Ignore Empty Lines: false Insert Space: false Mouse Wheel Zoom: true Sticky Tab Stops: true Trim Auto Whitespace: false Accept Suggestion On Enter: off Snippet Suggestions: top zoom、stops、trim、enter。 VSCode 字体 在 C:\\Windows\\WinSxS\\ 目录下搜索 consola。 丢到 ~\\.fonts\\ 目录下。 二 有关 Linux 命令 第一部分 size time 第二部分 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263 1. sudo 提权 2. ll 列举目录下所有文件或目录的详细信息 3. ls 列举目录下所有文件或目录的名称\t-l\t同 ll\t-a\t包括隐藏文件 4. pwd 显示当前工作目录的路径 5. cd 6. mkdir 创建新目录 7. rmdir 删除空目录 8. touch 创建空文件或更新文件的时间戳 9. rm 删除文件或目录10. cp 复制11. mv 移动或重命名\t-f\t强制\t-r\t递归12. cat 连接和显示文件内容13. more less 逐页显示文本文件内容14. head tail -n &lt;n&gt; &lt;file_name&gt; 显示文件的前几行或后几\t-n\t行号\t-f\t实时15. grep 在文件中搜索指定文本16. find [路径] [匹配条件] [-exec 动作 &#123;&#125; \\;] 在指定目录中搜索文件\t-empty\t-name &quot;&quot;\t文件名匹配方法\t-type [f|d|l]\t文件类型 【普通文件 目录 符号链接】\t-size [+-]size[cwbkMG]\t大小\t-[a|c|m][min|time] [+-]n\t【访问 状态 修改】【分钟 天】 find -type f -name &quot;*.exe&quot; -exec rm &#123;&#125; \\;\t16. ps 进程查询\t-e\t显示所有进程。\t-f\t全格式显示。\t-a\t显示终端上的所有进程，包括其他用户的进程。\t-u\t显示进程的详细状态。\t-x\t显示没有控制终端的进程。\tps -ef | grep 进程关键字17. kill18. ifconfig19. ping20. wget URL下载文件\t-O &lt;name&gt;\t后重命名\t-c 继续\t-b 后台\t-i &lt;file&gt;\t从指定文件获取要下载的URL地址21. chmod 修改文件或目录的权限\t[ugo a]\t[-+=]\t[rwx 421]\t&lt;file&gt;\tchmod +x &lt;file&gt; 三 其他 进考场第一步要拆了输入法 背拍子","categories":["OI"]},{"title":"任务清单","path":"/article/f2309c58.html","content":"一 总结各项知识点 这里一步一步来，计划一周至少半项。 博弈论博弈论的题的核心在于双方都聪明且知道对方聪明于是就有两个切入点我一定选使对方最优决策最劣的方案 （过程向如果存在界，打破界会变劣的一方一定会维护界。如果维护不了，就是必败界如果一定能维护，就是平衡界 （结果向一般博弈论都是结论题，优先考虑第二点 二 总结低级的错误 爆 int，爆模数，爆 0x3f3f3f3f。 当遇到一道可能有重边和自环的图时，要考虑 重自环。 要注意模数。 慎重读题。如果觉得题目难度不符，大概率读错题了。 要注意 STL 的常数。 复制同构代码时要反复检查大于小于和变量名 多测要清空，注意有没有提前结束的特判","categories":["OI"]},{"title":"作题笔记","path":"/article/db4c6ac.html","content":"CF388C Fox and Card Game 24-7-14-14 博弈论的题的核心在于双方都聪明且知道对方聪明 于是就有两个切入点 我一定选使对方最优决策最劣的方案 （过程向 如果存在界，打破界会变劣的一方一定会维护界。 如果维护不了，就是必败界 如果一定能维护，就是平衡界 （结果向 思考这题时陷入了第一点，看题解后wssb。 明明做过的博弈题九成九是结论题，还在那儿想过程，无语了。 考虑过通过第一点写个暴力找规律，可能有用 考场遇到这种情况一定不能犹豫 P2490 黑白棋 24.7.14.15 先考虑必败界，再dp一下就行 如果没理解错的话 有 k/2 堆棋子，每次可以在最多 d 堆中取走任意数量的棋子 记得 nim 好像有异或和为 0 的界？ 还记得 d取 的问题有 d+1 的界？ 这题不太能写暴力罢 仅有不超过 d 堆有多于0枚棋子时，直接秒 有且仅有 d+1的倍数 堆且都只剩1枚棋子，直接投 仅有不超过 d 堆有多于1枚棋子时，直接秒 有且仅有 d+1的倍数 堆且都只剩2枚棋子，直接投 应该是有 d+1 的界，难道依次判每个数是否在界上？ 推不下去了 看题解 我真厉害，两个界糊一起就对了……所谓 k-nim 首先将各堆石子数用二进制表示。 令 𝑟_𝑖 表示每堆石子二进制表示的第 𝑖 位上数字之和 mod(𝑘+1) 的值。 如果有任意一个 𝑟_𝑖≠0，先手必胜；否则先手必败。 结论和证明都很好理解 思考时没分析第一个界，如果能想到二进制拆分，就能填补第二个界的漏洞 啊啊啊，dp部分自己想罢 堆数 m = k/2 &lt;= 50, 棋子数上限 n-k &lt;= 10000 总方案数 （n, k） dp 是按二进制位考虑还是按堆数？ 二进制位 棋子数？ log((n-k)/(d+1)) * (k/2/(d+1)) * (n-k) 令 n = n - k, m = k / 2, d = d - 1 O( nm(logn-logd) / d ) d=1时复杂度最大，就是 普通nim 从这个复杂度来看的确应该分析一下 普通nim 复杂度算错了，但应该能过 P6902 Surveillance 24.7.21.2 看到倍增标签了，都没想出来…… 个人思路是维护一个个区间对。但是这样信息难以标识和合并。 正解：把区间考虑成从左端点跳到右端点，倍增跳几次。 CF710F String Set Queries 24.7.21.3 如果没有强制在线，那么就直接秒了。 在强制在在线的情况下，可以考虑根号重构。但不是很想写。 删除可以直接取关。可以实现动态插入 ACAM 吗？ 罢了，还是根号重构 直接最优解？那些 nlogn 做法的在干嘛 CF983E NN country 每次暴力找最值的肯定不行，容易想到可以倍增优化。 图上不会就想树，树上不会就想链。 P6651 Chain 这次是被标签中的容斥给误导了……或者说我对容斥的认识比较偏激？ 显然是可以 2^k 容斥，但时间复杂度显然是不对的。 这里应当依次单独考虑每个点主导的贡献。 这里，认为一个不合法链被其上第一个被ban掉的点主导。自然想到以拓扑序的顺序计数。 f 为前方案数，g 为后方案数， h 为中方案数，f` 为前主导方案数, 则有 f‘u=fu−∑f‘v∗hv,uans=∑f‘u∗guf`_u = f_u - \\sum{f`_v * h_{v,u}} \\\\ ans = \\sum{f`_u * g_u} f‘u​=fu​−∑f‘v​∗hv,u​ans=∑f‘u​∗gu​ 计数方法一共就那么几种，一定要挨个尝试一遍。 CF1817C Similar Polynomials tag: 拉插 今天终于是把拉格朗日插值学了…… 拉插的思路还是很好懂的。 不对，这到题的思路不在拉插上？ 以后推柿子是要留心一下有枚举范围缩小的极限情况 这题对拉插的理解考察很有意思 P4139 上帝与集合的正确用法 推柿子 推不出来。考虑牛顿迭代 毛线哦，暴力打表找规律 好好好，又是奇怪定理，玩不起 扩展欧拉定理 AT_agc064_d Red and Blue Chips tag: 计数 遇到此类求本质不同结果的题，先考虑如何 check 一个结果序列合法。 — stntn 对排序后的数组计数是简单的。 — FstAutoMaton","categories":["OI","作题"]},{"title":"鱼一","path":"/article/95c5e483.html","content":"好久没去钓过鱼了，不是吗。 原计划上周，但上一周家父有事，遂另作了安排。 就不暴露我的宝贝钓位了。好久没钓过鱼，还有些忐忑，结果一下杆，鱼就来了。今天稳了，心想。 【 】（我也不知道该用什么拟声词）。 回过神，鱼线崩了。 主线崩了…… 心想稳了的时候，只是扯了鱼竿，没弓起，导致力全硬加在线上…… 好好好。 闻斯鱼食以梨，遂摘梨，切梨小许为饵，其余入腹。余大惊，曰：“呜呼噫嘻，安得好梨！清洌甘甜，山泉弗如也。”。又曰：“愿为鱼兮。” 然后鱼就更不客气了，前前后后崩了 6 条线，一条鱼没上……","tags":["生活记录"],"categories":["鲜花"]},{"title":"雨与骑行","path":"/article/ae73c77e.html","content":"你说的对，但是绵阳大雨一天。 还好，出发时雨不大，不然我妈定不会放我走。但差点被我妈尾随。 先是一段漫无目的的骑行。车也是修好后第一次骑，俗话说， 久别胜新欢，心情舒畅轻松。突然加速，来与风双向奔赴，让自己浸泡在风雨中，流淌在风雨中，溶解在风雨中。 突然冒出一个念头，不如去看看我待过的学校？走！ 幼儿园离家较近，第一小学离家很近，第二小学离家更近。第一初中和第二小学在一个学校。我都只是到正门前，看一下，拍一张照，花费半小时不到。下一站——第二初中——就稍远了。 这时，雨忽然就大些。我到 【someplace】 想找个帽子，但没找到。没找到也好，完全不避这雨又何妨呢。于是就骑更加随性。于是下坡路不捏刹车。于是事后看骑行记录：最快速度 331(km/h)？ 一溜烟就到了涪江边。雨愈发猖狂。桥下，江河正涛滔；水上，汽雨共弥迷。隐隐间很有作诗一首，临江长啸的冲动。不过由于非机动车的道过窄，容不得停下恣意享受，便又加紧蹬车。实话说，这桥真的长，脚都给我蹬麻了，我也这才意识到自己已经湿透了。 到。雨已不可不避，但我避无可避。从小背包里拿出伞来，默默待在学校对面。自己肯定是在雨中脑袋进水后氧化生锈了，动作愈发缓慢，思绪也是。擦了擦眼镜片，徐徐吸气，徐徐吐息，心境在不大的城市空隙里扩散至远方，雨也落入心中，荡漾。所以湿漉漉的伞该怎么收回包里。 过了很久，也有可能只是一小会儿，寻思着，是要去妹中了吧？不欲原路折返。不是因为想看看不同的风景，只是来的时候走的那座桥真**长。我记得有条短点的，然后路痴上线，遂求助于百度地图。怕是这等好天气的让度娘也犯了迷糊，她不时嘟囔着：“卫星信号弱” “已偏离路线，正在重新规划”。两个糊涂鬼在一塌糊涂的雨中迷迷糊糊的前进。 回家，脑洞一开地称了下自己+衣物+衣物携带的雨水的总体重，硬是多了10斤。","tags":["生活记录"],"categories":["鲜花"]},{"title":"关于","path":"/about/index.html","content":"关于 你好，要杯什么茶？"},{"path":"/css/index.css","content":".l_left { background-position: center } footer p { text-align: center } /* 文章内链接：为链接使用荧光笔下划线效果 */ li:not([class]) a:not([class]), p:not([class]) a:not([class]), table a:not([class]) { padding-bottom: 0.1rem; background: linear-gradient(0, var(--theme-link-opa), var(--theme-link-opa)) no-repeat center bottom / 100% 40%; }"},{"title":"友链","path":"/friends/index.html","content":"tsxc的小站Halberd Cease's BlogLimit的床头笔记"}]